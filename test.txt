# checkoutのテスト

# コマンド
clone レポジトリ名
	リモートを一括ダウンロード。全ブランチもまとめて。

checkout ブランチ名
	ローカルのカレントブランチを切り替える。
	注意点として編集途中の状態で切り替えると編集内容が消える。
	事前にcommitするか、stash saveで取り置きしてstash popするか。

branch ブランチ名
	ブランチ作成
branch (引数なし)
branch --all
	ブランチ一覧。*がカレント。
	allつけるとリモート追跡ブランチも含める。

fetch
	リモートの最新状態をローカルのリモート追跡ブランチに反映する。
	引数なしのときデフォルトのorigin/masterを更新する。

merge
	指定したブランチを現在のブランチに統合する。
	fast-forward    ：派生元が派生時のままでマージが不要な時。カレント自体をコミット。
	non-fast-forward：派生元が派生時より進んでいてマージが必要な時。マージ後の新たなコミットが積まれる。

rebase
	ブランチの派生元を別のコミットに付け替える。つまり過去の歴史の改変。
	プルリク→誰かのブランチのマージ→自分のブランチのマージ
	mergeのffとnon-ffはコミットの話。
	rebaseはブランチのマージがあったときに利用を検討する話。

pull 
	pull = fetch + merge
	プルリクとは、チーム開発で自分のブランチをマージしたい時に管理関係者に出す通知。
	ブランチのマージは各自勝手にするものではなく、プルリクで音頭を取ってから行う。


# ブランチ
master	リモート。リリース可能な完全品質を保証するブランチ。

develop	リモート。開発の主軸になるブランチ。masterブランチから派生させる。

feature	ローカル。機能追加および修正作業を行うためのブランチ。作業完了してレビューが通ったら、developブランチにマージする。

support	リモート。旧バージョンでバグ発生時、masterから派生してバグ修正作業を行いコミットする。サポートが完了したら削除する。

★リモート追跡ブランチ
	ローカルリポジトリに存在して、他のリポジトリを追跡する。
	fetchで最新に更新。
	ローカルのorigin/masterがそれ。
	リモートのorigin/masterが追跡対象。


# フリー
なんでも書いていいぞ。






# EOF